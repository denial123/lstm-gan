from __future__ import print_function, division
import sys
import os
import matplotlib.pyplot as plt
import numpy as np
import pickle
import glob
import tensorflow as tf

from music21 import converter, instrument, note, chord, stream
from keras.layers import Input, Dense, Reshape, Dropout, LSTM, Bidirectional
from keras.layers import BatchNormalization, Activation, ZeroPadding2D
from keras.layers.advanced_activations import LeakyReLU
from keras.models import Sequential, Model, model_from_json
from keras.optimizers import Adam
from keras.utils import np_utils
from keras.utils.vis_utils import plot_model


def get_notes():
    """ Get all the notes and chords from the midi files """
    notes = []

    #hier zwischen love und anger wechseln
    for file in glob.glob("love_simple/*.mid"):
        midi = converter.parse(file)

        print("Parsing %s" % file)

        notes_to_parse = None

        try: # file has instrument parts
            s2 = instrument.partitionByInstrument(midi)
            notes_to_parse = s2.parts[0].recurse() 
        except: # file has notes in a flat structure
            notes_to_parse = midi.flat.notes
            
        for element in notes_to_parse:
            if isinstance(element, note.Note):
                notes.append(str(element.pitch))
            elif isinstance(element, chord.Chord):
                notes.append('.'.join(str(n) for n in element.normalOrder))

    return notes

def prepare_sequences(notes, n_vocab):
    """ Prepare the sequences used by the Neural Network """
    sequence_length = 100

    # Get all pitch names
    pitchnames = sorted(set(item for item in notes))

    # Create a dictionary to map pitches to integers
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

    network_input = []
    network_output = []

    # create input sequences and the corresponding outputs
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_input.append([note_to_int[char] for char in sequence_in])
        network_output.append(note_to_int[sequence_out])

    n_patterns = len(network_input)
    print ("n_patterns", n_patterns)
    # Reshape the input into a format compatible with LSTM layers
    network_input = np.reshape(network_input, (n_patterns, sequence_length, 1))
    
    # Normalize input between -1 and 1
    network_input = (network_input - float(n_vocab)/2) / (float(n_vocab)/2)
    network_output = np_utils.to_categorical(network_output)

    return (network_input, network_output)

  
def create_midi(prediction_output, filename):
    """ convert the output from the prediction to notes and create a midi file
        from the notes """
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for item in prediction_output:
        pattern = item[0]
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)

    midi_stream.show('text')
    #einkommentieren, um MuseScore zu öffnen
    #midi_stream.show()
    #einkommentieren, um midi file zu speichern
    midi_stream.write('midi', fp='{}.mid'.format(filename))

class GAN():
    def __init__(self, rows, load_model=False):
        self.seq_length = rows
        self.seq_shape = (self.seq_length, 1)
        self.latent_dim = 1000
        self.disc_loss = []
        self.disc_loss_real = []
        self.disc_loss_fake = []
        self.gen_loss = []
        self.d_acc_real = []
        self.d_acc_fake = []

        self.model_save_dir = 'saved_model'

        if load_model:
            self.load_model()
        else:
            self.init_model()

    def load_model(self):
        optimizer = Adam(0.0002, 0.5)

        #Load and compile the discriminator
        self.discriminator = self.load_keras_model("discriminator_model")
        self.discriminator.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])

        # Load the generator
        self.generator = self.load_keras_model("generator_model")

        # The generator takes noise as input and generates imgs
        z = Input(shape=(self.latent_dim,))
        generated_seq = self.generator(z)

        # For the combined model we will only train the generator
        self.discriminator.trainable = False

        # The discriminator takes generated images as input and determines validity
        validity = self.discriminator(generated_seq)

        # The combined model  (stacked generator and discriminator)
        # Trains the generator to fool the discriminator
        self.combined = self.load_keras_model("combined_model")
        self.combined.compile(loss='binary_crossentropy', optimizer=optimizer)

        ###

    def init_model(self):
        optimizer = Adam(0.0002, 0.5)

        # Build and compile the discriminator
        self.discriminator = self.build_discriminator()
        self.discriminator.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])

        # Build the generator
        self.generator = self.build_generator()

        # The generator takes noise as input and generates note sequences
        z = Input(shape=(self.latent_dim,))
        generated_seq = self.generator(z)

        # For the combined model we will only train the generator
        self.discriminator.trainable = False

        # The discriminator takes generated images as input and determines validity
        validity = self.discriminator(generated_seq)

        # The combined model  (stacked generator and discriminator)
        # Trains the generator to fool the discriminator
        self.combined = Model(z, validity)
        self.combined.compile(loss='binary_crossentropy', optimizer=optimizer)

    def build_discriminator(self):

        model = Sequential()
        model.add(LSTM(512, input_shape=self.seq_shape, return_sequences=True))
        model.add(Bidirectional(LSTM(512)))
        model.add(Dense(512))
        model.add(LeakyReLU(alpha=0.2))
        model.add(Dense(256))
        model.add(LeakyReLU(alpha=0.2))
        model.add(Dense(1, activation='sigmoid'))
        model.summary()
        #show structure of model in seperate png file
        #noch nicht auf Server
        #wichtig! Importieren: from keras.utils.vis_utils import plot_model
        #plot_model(model, to_file='discriminator_plot.png', show_shapes=True, show_layer_names=True)

        seq = Input(shape=self.seq_shape)
        validity = model(seq)

        return Model(seq, validity)
      
    def build_generator(self):

        model = Sequential()
        model.add(Dense(256, input_dim=self.latent_dim))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(512))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(1024))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(np.prod(self.seq_shape), activation='tanh'))
        model.add(Reshape(self.seq_shape))
        model.summary()
        # show structure of model in seperate png file
        #noch nicht auf Server
        #plot_model(model, to_file='generator_plot.png', show_shapes=True, show_layer_names=True)
        
        noise = Input(shape=(self.latent_dim,))
        seq = model(noise)

        return Model(noise, seq)

    def train(self, epochs, batch_size=128, sample_interval=50, model_save_interval=50):

        # Load and convert the data
        notes = get_notes()
        n_vocab = len(set(notes))
        X_train, y_train = prepare_sequences(notes, n_vocab)

        # Adversarial ground truths
        real = np.ones((batch_size, 1))
        fake = np.zeros((batch_size, 1))

        #### muss noch auf den Server übertragen werden ##### 
        # One-sided label smoothing
        #real = np.full((batch_size, 1), 0.9)


        # Training the model
        for epoch in range(epochs):
            # ---------------------
            # Training the discriminator
            # ---------------------

            # Select a random batch of note sequences
            idx = np.random.randint(0, X_train.shape[0], batch_size)
            real_seqs = X_train[idx]

            #noise = np.random.choice(range(484), (batch_size, self.latent_dim))
            #noise = (noise-242)/242
            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))

            # Generate a batch of new note sequences
            gen_seqs = self.generator.predict(noise)

            # Train the discriminator
            d_loss_real = self.discriminator.train_on_batch(real_seqs, real)
            d_loss_fake = self.discriminator.train_on_batch(gen_seqs, fake)
            d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)

            # ---------------------
            #  Training the Generator
            # ---------------------

            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))

            # Train the generator (to have the discriminator label samples as real)
            g_loss = self.combined.train_on_batch(noise, real)

            # Print the progress and save into loss lists
            if epoch % sample_interval == 0:
                print("%d [D loss real: %f, acc. real: %.2f%%] [D loss fake: %f, acc. fake: %.2f%%] [G loss: %f]" % (
                epoch, d_loss_real[0], 100 * d_loss_real[1], d_loss_fake[0], 100 * d_loss_fake[1], g_loss))
                self.disc_loss.append(d_loss[0])
                self.gen_loss.append(g_loss)
                self.d_acc_real.append(100 * d_loss_real[1])
                self.d_acc_fake.append(100 * d_loss_fake[1])
                self.disc_loss_real.append(d_loss_real[0])
                self.disc_loss_fake.append(d_loss_fake[0])

            #save models
            if epoch != 0 and epoch % model_save_interval == 0:
                #self.save_models()
                self.plot_loss()
                self.plot_accuracy()

        self.generate(notes)
        self.plot_loss()
        self.plot_accuracy()

    #--------------- Source for saving the GAN model -----------------
    #github : "Added functionality to save/load Keras model for intermittent training"
    #https://github.com/eriklindernoren/Keras-GAN/pull/117/commits/4591919e57875f16e2a6b90ed728fd15070aae94
    def load_keras_model(self, model_name):
        json_name = os.path.join(self.model_save_dir, model_name + ".json")
        weights_name = os.path.join(self.model_save_dir, model_name + ".h5")

        with open(json_name, 'r') as json_file:
            loaded_model_json = json_file.read()

        loaded_model = model_from_json(loaded_model_json)
        loaded_model.load_weights(weights_name)

        return loaded_model


    def save_models(self):
        self.save_model(self.discriminator,
                        os.path.join(self.model_save_dir, 'discriminator_model'))
        self.save_model(self.generator,
                        os.path.join(self.model_save_dir, 'generator_model'))
        self.save_model(self.combined,
                        os.path.join(self.model_save_dir, 'combined_model'))


    def save_model(self, model, model_path):
        with open(str(model_path) + '.json', 'w') as json_file:
            json_file.write(model.to_json())

        model.save_weights(str(model_path + '.h5'))

    def generate(self, input_notes):
        # Get pitch names and store in a dictionary
        notes = input_notes
        pitchnames = sorted(set(item for item in notes))
        num_pitches = len(pitchnames)
        int_to_note = dict((number, note) for number, note in enumerate(pitchnames))
        ##############
        print("num_pitches: %d" % len(pitchnames))
        #############

        # Use random noise to generate sequences
        noise = np.random.normal(0, 1, (1, self.latent_dim))
        predictions = self.generator.predict(noise)
        ##############
        # model.predict() aus Keras API: Generates output predictions for the input samples.
        # input here: noise
        # output: Numpy array(s) of predictions.
        # len(predictions[0]) = 100
        ##############

        # Turn noise vector into notes und chords
        pred_notes = [x * (int(num_pitches / 2)) + (num_pitches / 2) for x in predictions[0]]  # *242+242
        ##############
        print("pred_notes before:")
        print(pred_notes)
        ##############
        pred_notes = [int_to_note[int(x)] for x in pred_notes]
        ##############
        print("pred_notes after:")
        print(pred_notes)
        ##############

        # create and save new midi file
        create_midi(pred_notes, 'gan_final')

    def plot_loss(self):
        plt.plot(self.disc_loss_real, c='orange')
        plt.plot(self.disc_loss_fake, c='green')
        plt.plot(self.gen_loss, c='blue')
        plt.title("CGAN Loss per Epoch")
        plt.legend(['Discriminator real', 'Discriminator fake', 'Generator'])
        plt.xlabel('Epoch')
        plt.ylabel('Loss')
        plt.savefig('GAN_Loss_per_Epoch.png', transparent=True)
        plt.close()

    def plot_accuracy(self):
        plt.plot(self.d_acc_real, c='orange')
        plt.plot(self.d_acc_fake, c='green')
        plt.title("GAN Accuracy")
        plt.legend(['Acc real', 'Acc fake'])
        plt.xlabel('Epoch')
        plt.ylabel('Accuracy in %')
        plt.savefig('GAN_Accuracy_per_Epoch.png', transparent=True)
        plt.close()

if __name__ == '__main__':
  #---------------
  #ohne Speicherung
  #---------------
  #gan = GAN(rows=100)
  #gan.train(epochs=2, batch_size=32, sample_interval=1)
  #---------------
  #mit Speicherung
  #---------------
  gan = GAN(rows=100, load_model=False)
  gan.train(epochs=3000, batch_size=32,
            sample_interval=1, model_save_interval=100)
