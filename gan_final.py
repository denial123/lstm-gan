#%tensorflow_version 1.x
from __future__ import print_function, division
import sys
import os
import matplotlib.pyplot as plt
import numpy as np
import pickle
import glob
import tensorflow as tf

from music21 import converter, instrument, note, chord, stream
from keras.layers import Input, Dense, Reshape, LSTM, Bidirectional
from keras.layers import BatchNormalization
from keras.layers.advanced_activations import LeakyReLU
from keras.models import Sequential, Model
from keras.optimizers import Adam
from keras.utils import np_utils
from keras.utils.vis_utils import plot_model
from numpy.random import random
from random import shuffle, randint



def get_notes():
    """ Get all the notes and chords from the midi files """
    notes = []

    for file in glob.glob("love_simple/*.mid"): # or anger_simple
        midi = converter.parse(file)

        print("Parsing %s" % file)

        notes_to_parse = None

        try:  # file has instrument parts
            s2 = instrument.partitionByInstrument(midi)
            notes_to_parse = s2.parts[0].recurse()
        except:  # file has notes in a flat structure
            notes_to_parse = midi.flat.notes

        for element in notes_to_parse:
            if isinstance(element, note.Note):
                notes.append(str(element.pitch))
            elif isinstance(element, chord.Chord):
                notes.append('.'.join(str(n) for n in element.normalOrder))

    return notes


def prepare_sequences(notes, n_vocab):
    """ Prepare the sequences used by the Neural Network """
    sequence_length = 100

    # Get all pitch names
    pitchnames = sorted(set(item for item in notes))

    # Create a dictionary to map pitches to integers
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

    network_input = []

    # create input sequences and the corresponding outputs
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        # Uncomment to add noise: change each 10th note randomly
        #for j in range(0, 100, 10):
         #   print("before", sequence_in[j])
         #   sequence_in[j] = pitchnames[randint(0, len(pitchnames) - 1)]
         #   print("after", sequence_in[j])
        # add noise --end
        network_input.append([note_to_int[char] for char in sequence_in])

    # Shuffle
    shuffle(network_input)

    n_patterns = len(network_input)
    # Reshape the input into a format compatible with LSTM layers
    network_input = np.reshape(network_input, (n_patterns, sequence_length, 1))

    # Normalize input between -1 and 1
    network_input = (network_input - float(n_vocab) / 2) / (float(n_vocab) / 2)

    return network_input


def create_midi(prediction_output, filename):
    """ convert the output from the prediction to notes and create a midi file
        from the notes """
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for item in prediction_output:
        # pattern = item[0]
        pattern = item

        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)
    # midi_stream.show('text')
    # uncomment to open midi in MUSESCORE
    # midi_stream.show()
    midi_stream.write('midi', fp='{}.mid'.format(filename))
    print("Midi file saved.")


class GAN():
    def __init__(self, rows):
        self.seq_length = rows
        self.seq_shape = (self.seq_length, 1)
        self.latent_dim = 1000
        self.disc_loss = []
        self.disc_loss_real = []
        self.disc_loss_fake = []
        self.gen_loss = []
        self.d_acc_real = []
        self.d_acc_fake = []

        optimizer = Adam(0.0002, 0.5)

        # Build and compile the discriminator
        self.discriminator = self.build_discriminator()
        self.discriminator.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])

        # Build the generator
        self.generator = self.build_generator()

        # The generator takes noise as input and generates note sequences
        z = Input(shape=(self.latent_dim,))
        generated_seq = self.generator(z)

        # For the combined model we will only train the generator
        self.discriminator.trainable = False

        # The discriminator takes generated images as input and determines validity
        validity = self.discriminator(generated_seq)

        # The combined model  (stacked generator and discriminator)
        # Trains the generator to fool the discriminator
        self.combined = Model(z, validity)
        self.combined.compile(loss='binary_crossentropy', optimizer=optimizer)

    def build_discriminator(self):

        model = Sequential()
        model.add(LSTM(512, input_shape=self.seq_shape, return_sequences=True))
        model.add(Bidirectional(LSTM(512)))
        model.add(Dense(512))
        model.add(LeakyReLU(alpha=0.2))
        model.add(Dense(256))
        model.add(LeakyReLU(alpha=0.2))
        model.add(Dense(1, activation='sigmoid'))
        model.summary()

        seq = Input(shape=self.seq_shape)
        validity = model(seq)

        return Model(seq, validity)

    def build_generator(self):

        model = Sequential()
        model.add(Dense(256, input_dim=self.latent_dim))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(512))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(1024))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(np.prod(self.seq_shape), activation='tanh'))
        model.add(Reshape(self.seq_shape))
        model.summary()
        # Uncomment to show structure of model in seperate png file
        # Import: from keras.utils.vis_utils import plot_model
        # plot_model(model, to_file='generator_plot.png', show_shapes=True, show_layer_names=True)

        noise = Input(shape=(self.latent_dim,))
        seq = model(noise)

        return Model(noise, seq)

    # example of smoothing class=1 to [0.7, 1]
    def smooth_positive_labels(self, y):
        return y - 0.3 + (random(y.shape) * 0.3)

    def train(self, epochs, batch_size=128, sample_interval=50, update_plot_interval=50, repetition_disc=1,
              repetition_gen=1):

        # 1. Load and convert the data
        notes = get_notes()
        n_vocab = len(set(notes))
        X_train = prepare_sequences(notes, n_vocab)

        # 2. Adversarial ground truths
        real = np.ones((batch_size, 1))
        fake = np.zeros((batch_size, 1))

        # Uncomment in case of One-sided label smoothing
        # real = self.smooth_positive_labels(real)

        # Calculate number of interations = len data_set / batchsize
        it = len(X_train) / batch_size

        # 3. Training the model
        for epoch in range(epochs):
            # Array with all numbers between 0 and length of training samples
            idx_all = []
            for r in range(len(X_train)):
                idx_all.append(r)
            # Shuffle numbers
            shuffle(idx_all)
            for i in range(int(it)):
                # print("Epoch %i: (%i|%i)"%(epoch,i,int(it)))
                # ---------------------
                # 3a. Training the discriminator
                # ---------------------
                for step in range(repetition_disc):
                    # for every iteration pick the last "batch_size-many" samples
                    idx = []
                    for id in range(batch_size):
                        idx.append(idx_all.pop())
                    real_seqs = X_train[idx]

                    noise = np.random.normal(0, 1, (batch_size, self.latent_dim))

                    # Generate a batch of new note sequences
                    gen_seqs = self.generator.predict(noise)

                    # Train the discriminator
                    d_loss_real = self.discriminator.train_on_batch(real_seqs, real)
                    d_loss_fake = self.discriminator.train_on_batch(gen_seqs, fake)
                    d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)

                # ---------------------
                #  3b. Training the Generator
                # ---------------------
                # Uncomment if applying label smoothing
                # gen_real = np.ones((batch_size, 1))
                for step in range(repetition_gen):
                    noise = np.random.normal(0, 1, (batch_size, self.latent_dim))

                    # Train the generator (to have the discriminator label samples as real)
                    g_loss = self.combined.train_on_batch(noise, real)

                print("%d %d[D loss real: %f, acc. real: %.2f%%] [D loss fake: %f, acc. fake: %.2f%%] [G loss: %f]" % (
                    epoch, i, d_loss_real[0], 100 * d_loss_real[1], d_loss_fake[0], 100 * d_loss_fake[1], g_loss))

            # 4. Print the progress of 1 epoch and save into loss lists
            print("%d [D loss real: %f, acc. real: %.2f%%] [D loss fake: %f, acc. fake: %.2f%%] [G loss: %f]" % (
                epoch, d_loss_real[0], 100 * d_loss_real[1], d_loss_fake[0], 100 * d_loss_fake[1], g_loss))
            self.disc_loss.append(d_loss[0])
            self.gen_loss.append(g_loss)
            self.d_acc_real.append(100 * d_loss_real[1])
            self.d_acc_fake.append(100 * d_loss_fake[1])
            self.disc_loss_real.append(d_loss_real[0])
            self.disc_loss_fake.append(d_loss_fake[0])

            # Generate samples in between
            if epoch != 0 and epoch % sample_interval == 0:
                self.generate(notes, epoch)

            # Update plot of loss functions regularly in case of sudden breakdown
            if epoch != 0 and epoch % update_plot_interval == 0:
                self.plot_loss()
                self.plot_accuracy()

        self.generate(notes, epoch)
        self.plot_loss()
        self.plot_accuracy()

    def generate(self, input_notes, epoch):
        """ generate sequence from noise and turn it into notes/chords"""
        # Get pitch names and store in a dictionary
        notes = input_notes
        pitchnames = sorted(set(item for item in notes))
        num_pitches = len(pitchnames)
        int_to_note = dict((number, note) for number, note in enumerate(pitchnames))

        # Use random noise to generate sequence
        noise = np.random.normal(0, 1, (1, self.latent_dim))
        predictions = self.generator.predict(noise)

        # Turn noise vector into notes und chords
        pred_notes = [x * (int(num_pitches / 2)) + (num_pitches / 2) for x in predictions[0]]  # *242+242

        pred_after_transf = []
        for x in pred_notes:
            if int(x) not in int_to_note:
                pred_after_transf.append(int_to_note[int(x - 1)])
            else:
                pred_after_transf.append(int_to_note[int(x)])

        # create and save new midi file
        create_midi(pred_after_transf, 'gan_good_final_%d' % epoch)

    def plot_loss(self):
        """ plot disc and gen loss and save it to file """
        plt.plot(self.disc_loss_real, c='orange')
        plt.plot(self.disc_loss_fake, c='green')
        plt.plot(self.gen_loss, c='blue')
        plt.title("GAN Loss per Epoch")
        plt.legend(['Discriminator real', 'Discriminator fake', 'Generator'])
        plt.xlabel('Epoch')
        plt.ylabel('Loss')
        plt.savefig('GAN_Loss_per_Epoch.png', transparent=True)
        plt.close()

    def plot_accuracy(self):
        """ plot disc and gen accuracy and save it to file """
        plt.plot(self.d_acc_real, c='orange')
        plt.plot(self.d_acc_fake, c='green')
        plt.title("GAN Accuracy")
        plt.legend(['Acc real', 'Acc fake'])
        plt.xlabel('Epoch')
        plt.ylabel('Accuracy in %')
        plt.savefig('GAN_Accuracy_per_Epoch.png',
                    transparent=True)
        plt.close()


if __name__ == '__main__':
    gan = GAN(rows=100)
    # Set number of epochs here!
    gan.train(epochs=1, batch_size=32, sample_interval=2, update_plot_interval=2, repetition_disc=1, repetition_gen=1)
